const Plane = require('../src/plane');
const Airport = require('../src/airport');
const Weather = require('../src/weather');
const test = require('../test-framework/test-framework');

test.it(`Checking that number of planes at airport increases by one when a plane lands`, () => {
    let plane, airport, actualOutput, expectedOutput;
    // Arrange
    plane = new Plane('PL1');
    airport = new Airport();
    expectedOutput = true;

    // Act
    actualOutput = airport.landPlane(plane);

    // Assert
    test.assertEquals('Plane has not landed', true, expectedOutput);
    test.assertEquals('Planes in airport not incremented by 1', 1, airport.getPlanesInAirport().length);
    test.assertEquals('Plane PL1 not landed', true, airport.getPlanesInAirport().includes('PL1'));
});

test.it(`Checking that a value for airport capacity is set`, () => {
    let airport, actualOutput, expectedOutput;
    //Arrange
    airport = new Airport(Weather.getWeather(), 20); // Using weather values generated by random generator
    expectedOutput = 20;

    //Act
    actualOutput = airport.getCapacity();

    //Assert
    test.assertEquals('Airport capacity not changed', expectedOutput, actualOutput);
});

test.it(`Checking that a plane cannot land at the airport, if the airport is full`, () => {
    let actualOutput, actualOutput1, expectedOutput, expectedOutput1, plane, plane1, airport;
    // Arrange
    plane = new Plane('PL1');
    airport = new Airport('SUNNY', 1); // Mocking the weather values generated by random generator 
    expectedOutput = true;
    plane1 = new Plane('Pl2');
    expectedOutput1 = false;

    // Act
    actualOutput = airport.landPlane(plane);
    actualOutput1 = airport.landPlane(plane1);

    //Assert
    test.assertEquals('Plane could not land even when the airport was not full', expectedOutput, actualOutput);
    test.assertEquals('Plane landed even when the airport is full', expectedOutput1, actualOutput1);
});

test.it(`Checking that a plane takes off from the airport and is no longer in airport`, () => {
    let actualOutput, actualOutput1, expectedOutput, expectedOutput1, plane, airport;
    // Arrange
    plane = new Plane('PL1');
    airport = new Airport();
    expectedOutput = true;
    expectedOutput1 = false;

    // Act
    airport.landPlane(plane);
    actualOutput = airport.takeOffPlane(plane);
    actualOutput1 = airport.getPlanesInAirport().includes('PL1');

    //Assert
    test.assertEquals('Plane did not takeoff from the airport', expectedOutput, actualOutput);
    test.assertEquals('Plane took off but is still present at the airport', expectedOutput1, actualOutput1);
    test.assertEquals('Plane did not takeoff from the airport', 0, airport.getPlanesInAirport().length);
});

test.it(`Checking that a plane does not takeoff if it is not in airport & plane cannot land if it is in airport`, () => {
    let actualOutput, actualOutput1, expectedOutput, expectedOutput1, plane, airport;
    // Arrange
    plane = new Plane('PL1');
    airport = new Airport();
    expectedOutput = false;
    expectedOutput1 = false;

    // Act
    airport.landPlane(plane);
    actualOutput = airport.landPlane(plane);
    airport.takeOffPlane(plane);
    actualOutput1 = airport.takeOffPlane(plane);

    // Assert
    test.assertEquals('Plane landed even when the plane was already in the airport', expectedOutput, actualOutput);
    test.assertEquals('Plane took off even when it was not in the airport', expectedOutput1, actualOutput1);
});

test.it(`Checking that a plane does not land at the airport, if weather is stormy`, () => {
    let actualOutput, expectedOutput, plane, airport;
    // Arrange
    plane = new Plane('PL1');
    airport = new Airport('STORMY'); // Mocking the weather values of random generator
    expectedOutput = false;

    // Act
    actualOutput = airport.landPlane(plane);

    // Assert
    test.assertEquals('Plane landed even when weather was stormy', expectedOutput, actualOutput);
});

test.it('Checking that a plane cannot take off from the airport, if weather is stormy', () => {
    let actualOutput, expectedOutput, plane, airport, weather;
    // Arrange
    plane = new Plane('PL1');
    airport = new Airport('STORMY'); // Mocking the weather values of random generator
    expectedOutput = false;

    // Act
    actualOutput = airport.takeOffPlane(plane);

    // Assert
    test.assertEquals(`Plane took off even when the weather was stormy`, expectedOutput, actualOutput);
});

test.it('Checking that planes that have landed must be at airport in the list of planes and count should increment by one', () => {
    let actualOutput, actualOutput1, expectedOutput, expectedOutput1, plane, plane1, airport;
    // Arrange
    plane = new Plane('PL1');
    plane1 = new Plane('PL2');
    airport = new Airport();
    expectedOutput = true;
    expectedOutput1 = 2;

    // Act
    airport.landPlane(plane);
    actualOutput = airport.getPlanesInAirport().includes('PL1');
    airport.landPlane(plane1);
    actualOutput1 = airport.getPlanesInAirport().length;

    // Assert
    test.assertEquals(`Plane landed at airport but is not present in list of planes`, expectedOutput, actualOutput);
    test.assertEquals(`Plane has landed at airport but count not incremented by one`, expectedOutput1, actualOutput1);
});